{"version":3,"sources":["components/Footer.tsx","store/zstore.ts","utils/api.ts","components/Header.tsx","components/PostsFilter.tsx","utils/format.ts","components/PriceChip.tsx","components/PostCard.tsx","components/PostsList.tsx","hooks/useAccessToken.ts","utils/Colors.ts","pages/Blog.tsx","hooks/usePublicUserInfo.ts","hooks/useBlogPosts.ts","pages/ConnectToLnForm.tsx","pages/CreateNewPostForm.tsx","pages/Drafts.tsx","hooks/useDrafts.ts","hooks/usePost.ts","pages/EditPost.tsx","pages/Faq.tsx","pages/Home.tsx","hooks/usePosts.ts","pages/LogIn.tsx","pages/Post.tsx","pages/Profile.tsx","hooks/useNodeInfo.ts","pages/ResetPassword.tsx","pages/SendResetPasswordEmail.tsx","pages/Settings.tsx","utils/validation.ts","pages/SignUp.tsx","pages/Subs.tsx","hooks/usePostsFromSubs.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Footer","style","styles","footer","Typography","variant","fontSize","Tooltip","title","href","textDecoration","IconButton","id","size","edge","color","aria-label","footerButton","to","position","width","bottom","textAlign","height","paddingTop","paddingBottom","borderTop","marginTop","backgroundColor","marginRight","useStore","create","set","accessToken","setAccessToken","lnToken","setLnToken","user","setUser","UNAUTHORIZED","BASE_URL","rta","fn","a","args","apply","response","includes","status","regenerateAccessToken","newAccessToken","slice","concat","fetch","method","headers","body","JSON","stringify","json","createPost","Authorization","rtaCreatePost","res","ok","Error","disconnectNode","getPosts","page","free","search","endpoint","getUserPosts","username","getDrafts","rtaGetDrafts","getPostsFromSubs","rtaGetPostsFromSubs","getPost","rtaGetPost","connectToLn","rtaConnectToLn","getNodeInfo","getNodeStatus","rtaGetNodeStatus","resJSON","updateUser","userId","rtaUpdateUser","createUser","loginUser","getUser","rtaGetUser","getCurrentUser","rtaGetCurrentUser","createInvoice","postId","rtaCreateInvoice","checkPremiumAccess","authorId","rtaCheckPremiumAccess","paid","logPayment","rtaLogPayment","console","warn","updatePost","rtaUpdatePost","deletePost","rtaDeletePost","deleteRefreshToken","sendResetPasswordEmail","email","resetPassword","token","deleteUser","rtaDeleteUser","getSubs","rtaGetSubs","subscribe","rtaSubscribe","unsubscribe","subId","rtaUnsubscribe","Header","state","location","useLocation","showLogin","pathname","useEffect","then","node","Box","headerContainer","AppBar","Toolbar","component","sx","flexGrow","link","Button","logout","display","flexDirection","justifyContent","alignItems","top","zIndex","marginBottom","Search","styled","theme","borderRadius","shape","alpha","palette","common","white","spacing","marginLeft","SearchIconWrapper","padding","pointerEvents","StyledInputBase","InputBase","paddingLeft","transition","transitions","breakpoints","up","PostsFilter","props","onFreeChanged","onSearchChanged","useState","searchInputValue","setSearchInputValue","query","setQuery","setFree","throttledQuery","useCallback","_","placeholder","inputProps","value","onChange","e","target","FormGroup","FormControlLabel","control","Switch","checked","label","formatDateString","date","monthType","dateObj","Date","month","toLocaleString","day","getDate","year","getFullYear","PriceChip","premium","Chip","PostCard","post","redirect","setRedirect","Card","className","card","CardActionArea","onClick","_id","CardContent","gutterBottom","flex","createdAt","toString","PostsList","posts","length","map","useAccessToken","Colors","Blog","useParams","publicUserInfo","publicUser","setPublicUser","usePublicUserInfo","setPage","setSearch","totalPages","setPosts","docs","useBlogPosts","isAuthor","subs","setSubs","sub","setSub","subscribed","setSubscribed","s","find","author","Helmet","blog","btcAddress","icon","faBitcoin","Pagination","count","event","ConnectToLnForm","hostInputValue","setHostInputValue","certInputValue","setCertInputValue","macaroonInputValue","setMacaroonInputValue","host","cert","macaroon","TextField","formField","fullWidth","required","maxRows","multiline","button","CreateNewPostForm","titleInputValue","setTitleInputValue","setPremium","EditorState","createEmpty","editorState","setEditorState","editor","React","useRef","publishPost","content","convertToRaw","getCurrentContent","published","newPost","saveDraft","minHeight","cursor","current","focus","ref","handleKeyCommand","command","eventTimeStamp","newEditorState","RichUtils","name","Drafts","drafts","setDrafts","useDrafts","usePost","setPost","EditPost","editing","setEditing","createWithContent","convertFromRaw","parse","submitEdits","Skeleton","questions","question","answer","Faq","q","Accordion","AccordionSummary","expandIcon","AccordionDetails","Home","paginatedPosts","setPaginatedPosts","usePosts","destroySession","createTheme","LogIn","setEmail","password","setPassword","formError","setFormError","handleSubmit","preventDefault","error","handleForgotPassword","ThemeProvider","Container","maxWidth","CssBaseline","onSubmit","noValidate","mt","margin","autoComplete","autoFocus","type","mb","Grid","container","item","xs","Link","Post","setPaid","invoice","setInvoice","checkedAccess","setCheckedAccess","loading","setLoading","isCreator","postNodeStatus","setPostNodeStatus","payreq","hash","amount","subscriptionPrice","webSocket","WebSocket","onopen","debug","onmessage","log","eventData","data","editPost","LoadingPostSkeleton","Paywall","Paper","elevation","wordWrap","showPaywall","showPost","PostContent","Divider","readOnly","Profile","x","nodeInfo","setNodeInfo","useNodeInfo","NodeStatusChip","balance","replace","ResetPassword","passwordConfirmation","setPasswordConfirmation","SendResetPasswordEmail","submitted","setSubmitted","Settings","saved","setSaved","blogTitle","setBlogTitle","setBtcAddress","setSubscriptionPrice","btcAddressInvalid","setBtcAddressInvalid","showDeleteAccountDialog","setShowDeleteAccountDialog","handleBtcAddressInputChange","deleteAccount","closeSnackbarAction","newPrice","parseInt","helperText","validate","Snackbar","open","autoHideDuration","onClose","message","action","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","isValidEmail","test","String","toLowerCase","SignUp","setUsername","invalidUsername","setInvalidUsername","invalidEmail","setInvalidEmail","invalidPassword","setInvalidPassword","Subs","usePostsFromSubs","appContainer","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc960ca1.chunk.js","sourcesContent":["import GitHubIcon from \"@mui/icons-material/GitHub\";\nimport HelpOutlineIcon from \"@mui/icons-material/HelpOutline\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Typography from \"@mui/material/Typography\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Footer = () => {\n    return (\n        <footer style={styles.footer as React.CSSProperties}>\n            <Typography variant=\"overline\" style={{ fontSize: \"0.5rem\" }}>\n                <Tooltip title=\"Source code\">\n                    <a\n                        href=\"https://github.com/phrazzld/brainstorm-press-client\"\n                        style={{ textDecoration: \"none\" }}\n                    >\n                        <IconButton\n                            id=\"source-code\"\n                            size=\"small\"\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"source-code\"\n                            style={styles.footerButton}\n                        >\n                            <GitHubIcon />\n                        </IconButton>\n                    </a>\n                </Tooltip>\n\n                <Tooltip title=\"FAQ\">\n                    <Link to=\"/faq\" style={{ textDecoration: \"none\" }}>\n                        <IconButton\n                            id=\"faq\"\n                            size=\"small\"\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"faq\"\n                            style={styles.footerButton}\n                        >\n                            <HelpOutlineIcon />\n                        </IconButton>\n                    </Link>\n                </Tooltip>\n            </Typography>\n        </footer>\n    );\n};\n\nconst styles = {\n    footer: {\n        position: \"fixed\",\n        width: \"100%\",\n        bottom: 0,\n        textAlign: \"center\",\n        height: \"2rem\",\n        paddingTop: \"0.5rem\",\n        paddingBottom: \"0.5rem\",\n        borderTop: \"1px solid #e0e0e0\",\n        marginTop: \"1rem\",\n        backgroundColor: \"#fafafa\",\n    },\n    footerButton: {\n        color: \"#1976d2\",\n        marginRight: \"2rem\",\n    },\n};\n","import create from \"zustand\";\nimport { User } from \"../utils/types\";\n\ntype Store = {\n  accessToken: string;\n  setAccessToken: (accessToken: string) => void;\n  lnToken: string;\n  setLnToken: (lnToken: string) => void;\n  user: User | null;\n  setUser: (user: User | null) => void;\n};\n\nexport const useStore = create<Store>((set) => ({\n  accessToken: \"\",\n  setAccessToken: (accessToken: string) => set({ accessToken: accessToken }),\n\n  lnToken: \"\",\n  setLnToken: (lnToken: string) => set({ lnToken: lnToken }),\n\n  user: null,\n  setUser: (user: User | null) => set({ user: user }),\n}));\n","import {\n  ApiError,\n  AuthenticateUserRequestBody,\n  AuthResponse,\n  ConnectToLnBody,\n  CreateUserRequestBody,\n  Invoice,\n  LnNode,\n  LogPaymentRequestBody,\n  NodeInfo,\n  NodeStatus,\n  PaginatedResponse,\n  PaymentStatus,\n  Post,\n  PostRequestBody,\n  ResetPasswordBody,\n  Subscription,\n  User,\n  UserRequestBody,\n} from \"./types\";\n\nconst UNAUTHORIZED = [401, 403];\n\nconst BASE_URL =\n  process.env.NODE_ENV === \"production\"\n    ? \"brainstorm-press-api.herokuapp.com\"\n    : \"\";\n\n// rta = regenerate token and\n// Assumes accessToken is the last arg\nconst rta = async (fn: any, ...args: any): Promise<any> => {\n  const response = await fn.apply(null, args);\n\n  if (UNAUTHORIZED.includes(response.status)) {\n    const newAccessToken = await regenerateAccessToken();\n\n    return await fn.apply(null, args.slice(0, -1).concat(newAccessToken));\n  }\n\n  return response;\n};\n\nexport const regenerateAccessToken = async (): Promise<string> => {\n  const response = await fetch(`${BASE_URL}/api/tokens/access`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({}),\n  });\n  const accessToken = await response.json();\n  return accessToken;\n};\n\nconst createPost = async (\n  body: PostRequestBody,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify(body),\n  });\n};\n\nexport const rtaCreatePost = async (\n  body: PostRequestBody,\n  accessToken: string\n): Promise<Post> => {\n  const res = await rta(createPost, body, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to create new post.\");\n  }\n\n  return await res.json();\n};\n\nexport const disconnectNode = async (lnToken: string): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/nodes`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: lnToken,\n    },\n  });\n};\n\nexport const getPosts = async (\n  page: number,\n  free?: boolean,\n  search?: string\n): Promise<PaginatedResponse> => {\n  let endpoint = `${BASE_URL}/api/posts?page=${page}`;\n  if (free) {\n    endpoint += `&free=true`;\n  }\n  if (search) {\n    endpoint += `&search=${search}`;\n  }\n  const response = await fetch(endpoint, {\n    method: \"GET\",\n  });\n  return await response.json();\n};\n\nexport const getUserPosts = async (\n  username: string,\n  page: number,\n  free?: boolean,\n  search?: string\n): Promise<PaginatedResponse> => {\n  let endpoint = `${BASE_URL}/api/posts/users/${username}?page=${page}`;\n  if (free) {\n    endpoint += `&free=true`;\n  }\n  if (search) {\n    endpoint += `&search=${search}`;\n  }\n  const response = await fetch(endpoint, {\n    method: \"GET\",\n  });\n  return await response.json();\n};\n\nconst getDrafts = async (\n  username: string,\n  page: number,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(\n    `${BASE_URL}/api/posts/users/${username}/drafts?page=${page}`,\n    {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    }\n  );\n};\n\nexport const rtaGetDrafts = async (\n  username: string,\n  page: number,\n  accessToken: string\n): Promise<PaginatedResponse> => {\n  const res = await rta(getDrafts, username, page, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to get drafts.\");\n  }\n\n  return await res.json();\n};\n\nconst getPostsFromSubs = async (\n  page: number,\n  accessToken: string\n): Promise<Response> => {\n  return fetch(`${BASE_URL}/api/posts/subscriptions?page=${page}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaGetPostsFromSubs = async (\n  page: number,\n  accessToken: string\n): Promise<PaginatedResponse> => {\n  const res = await rta(getPostsFromSubs, page, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to get posts from subs.\");\n  }\n\n  return await res.json();\n};\n\nexport const getPost = async (\n  id: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/posts/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaGetPost = async (\n  id: string,\n  accessToken: string\n): Promise<Post> => {\n  const res = await rta(getPost, id, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to get post.\");\n  }\n\n  return await res.json();\n};\n\nconst connectToLn = async (\n  body: ConnectToLnBody,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/nodes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify(body),\n  });\n};\n\nexport const rtaConnectToLn = async (\n  body: ConnectToLnBody,\n  accessToken: string\n): Promise<LnNode> => {\n  const res = await rta(connectToLn, body, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to connect to LN.\");\n  }\n\n  return await res.json();\n};\n\nexport const getNodeInfo = async (lnToken: string): Promise<NodeInfo> => {\n  const response = await fetch(`${BASE_URL}/api/nodes`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: lnToken,\n    },\n  });\n  return await response.json();\n};\n\nconst getNodeStatus = async (\n  id: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/nodes/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaGetNodeStatus = async (\n  id: string,\n  accessToken: string\n): Promise<NodeStatus> => {\n  const res = await rta(getNodeStatus, id, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to get node status.\");\n  }\n\n  const resJSON = await res.json();\n  return resJSON.status;\n};\n\nconst updateUser = async (\n  userId: string,\n  body: UserRequestBody,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/users/${userId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify(body),\n  });\n};\n\nexport const rtaUpdateUser = async (\n  userId: string,\n  body: UserRequestBody,\n  accessToken: string\n): Promise<void> => {\n  const res = await rta(updateUser, userId, body, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to update user.\");\n  }\n};\n\nexport const createUser = async (\n  body: CreateUserRequestBody\n): Promise<AuthResponse | ApiError> => {\n  const response = await fetch(`${BASE_URL}/api/users`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n  return await response.json();\n};\n\nexport const loginUser = async (\n  body: AuthenticateUserRequestBody\n): Promise<AuthResponse | ApiError> => {\n  const response = await fetch(`${BASE_URL}/api/users/session`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n  return await response.json();\n};\n\nconst getUser = async (\n  username: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/users/${username}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaGetUser = async (\n  username: string,\n  accessToken: string\n): Promise<User> => {\n  const res = await rta(getUser, username, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to get user.\");\n  }\n\n  return await res.json();\n};\n\nconst getCurrentUser = async (accessToken: string): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/users`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaGetCurrentUser = async (\n  accessToken: string\n): Promise<User | null> => {\n  const res = await rta(getCurrentUser, accessToken);\n\n  if (!res.ok) {\n    // User is not logged in, return null\n    return null;\n  }\n\n  return await res.json();\n};\n\nconst createInvoice = async (\n  postId: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/posts/${postId}/invoice`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaCreateInvoice = async (\n  postId: string,\n  accessToken: string\n): Promise<Invoice> => {\n  const res = await rta(createInvoice, postId, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to create invoice.\");\n  }\n\n  return await res.json();\n};\n\nconst getPayment = async (\n  postId: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/posts/${postId}/payments`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaGetPayment = async (\n  postId: string,\n  accessToken: string\n): Promise<PaymentStatus> => {\n  const res = await rta(getPayment, postId, accessToken);\n\n  if (res.status === 401) {\n    return { paid: false };\n  }\n\n  if (!res.ok) {\n    throw new Error(\"Failed to get payment.\");\n  }\n\n  return await res.json();\n};\n\n// Check if current user has paid for access to premium content\nconst checkPremiumAccess = async (\n  authorId: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/users/${authorId}/access`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaCheckPremiumAccess = async (\n  authorId: string,\n  accessToken: string\n): Promise<PaymentStatus> => {\n  const res = await rta(checkPremiumAccess, authorId, accessToken);\n\n  if (UNAUTHORIZED.includes(res.status)) {\n    return { paid: false };\n  }\n\n  if (!res.ok) {\n    throw new Error(\"Failed to check premium access.\");\n  }\n\n  return await res.json();\n};\n\nconst logPayment = async (\n  userId: string,\n  body: LogPaymentRequestBody,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/users/${userId}/payments`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify(body),\n  });\n};\n\nexport const rtaLogPayment = async (\n  userId: string,\n  body: LogPaymentRequestBody,\n  accessToken: string\n): Promise<void> => {\n  const res = await rta(logPayment, userId, body, accessToken);\n\n  if (!res.ok) {\n    console.warn(\"Failed to log payment.\");\n  }\n};\n\nconst updatePost = async (\n  postId: string,\n  body: PostRequestBody,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/posts/${postId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify(body),\n  });\n};\n\nexport const rtaUpdatePost = async (\n  postId: string,\n  body: PostRequestBody,\n  accessToken: string\n): Promise<void> => {\n  const res = await rta(updatePost, postId, body, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to update post.\");\n  }\n};\n\nconst deletePost = async (\n  postId: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/posts/${postId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaDeletePost = async (\n  postId: string,\n  accessToken: string\n): Promise<void> => {\n  const res = await rta(deletePost, postId, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to delete post.\");\n  }\n};\n\nexport const deleteRefreshToken = async (): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/tokens/refresh`, {\n    method: \"DELETE\",\n  });\n};\n\nexport const sendResetPasswordEmail = async (\n  email: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/reset-password/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email }),\n  });\n};\n\nexport const resetPassword = async (\n  body: ResetPasswordBody,\n  userId: string,\n  token: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/reset-password/${userId}/${token}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n};\n\nconst deleteUser = async (\n  userId: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/users/${userId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaDeleteUser = async (\n  userId: string,\n  accessToken: string\n): Promise<void> => {\n  const res = await rta(deleteUser, userId, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to delete user.\");\n  }\n};\n\nconst getSubs = async (accessToken: string): Promise<Response> => {\n  return fetch(`${BASE_URL}/api/subscriptions`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n\nexport const rtaGetSubs = async (\n  accessToken: string\n): Promise<Array<Subscription>> => {\n  const res = await rta(getSubs, accessToken);\n\n  if (UNAUTHORIZED.includes(res.status)) {\n    return [];\n  }\n\n  if (!res.ok) {\n    throw new Error(\"Could not get subs.\");\n  }\n\n  return await res.json();\n};\n\nconst subscribe = async (\n  authorId: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/subscriptions`, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ authorId }),\n  });\n};\n\nexport const rtaSubscribe = async (\n  authorId: string,\n  accessToken: string\n): Promise<Subscription> => {\n  const res = await rta(subscribe, authorId, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to subscribe.\");\n  }\n\n  return await res.json();\n};\n\nconst unsubscribe = async (\n  subId: string,\n  accessToken: string\n): Promise<Response> => {\n  return await fetch(`${BASE_URL}/api/subscriptions/${subId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n\nexport const rtaUnsubscribe = async (\n  subId: string,\n  accessToken: string\n): Promise<void> => {\n  const res = await rta(unsubscribe, subId, accessToken);\n\n  if (!res.ok) {\n    throw new Error(\"Failed to unsubscribe.\");\n  }\n};\n","import AccountCircleOutlinedIcon from \"@mui/icons-material/AccountCircleOutlined\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport FileCopyOutlinedIcon from \"@mui/icons-material/FileCopyOutlined\";\nimport LogoutIcon from \"@mui/icons-material/Logout\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useStore } from \"../store/zstore\";\nimport { rtaGetCurrentUser } from \"../utils/api\";\n\nexport const Header = () => {\n    const user = useStore((state) => state.user);\n    const setUser = useStore((state) => state.setUser);\n    const accessToken = useStore((state) => state.accessToken);\n    const setLnToken = useStore((state) => state.setLnToken);\n    const location = useLocation();\n\n    const showLogin: boolean =\n        ![\"/signup\", \"/login\"].includes(location.pathname) && !user;\n\n    useEffect(() => {\n        if (!user) {\n            rtaGetCurrentUser(accessToken).then((res) => {\n                if (res && typeof res === \"object\") {\n                    setUser(res);\n                    setLnToken(res.node?.token || \"\");\n                }\n            });\n        }\n    }, [user, accessToken, setLnToken, setUser]);\n\n    return (\n        <Box style={styles.headerContainer as React.CSSProperties}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography\n                        variant=\"h6\"\n                        component=\"div\"\n                        sx={{ flexGrow: 1 }}\n                    >\n                        <Link to=\"/\" style={styles.link}>\n                            Brainstorm Press\n                        </Link>\n                    </Typography>\n                    {user && (\n                        <>\n                            <Link to=\"/posts/new\" style={styles.link}>\n                                <Tooltip title=\"Create\">\n                                    <IconButton\n                                        id=\"create-post-header-button\"\n                                        size=\"large\"\n                                        edge=\"start\"\n                                        color=\"inherit\"\n                                        aria-label=\"new-post\"\n                                    >\n                                        <AddCircleOutlineIcon />\n                                    </IconButton>\n                                </Tooltip>\n                            </Link>\n                            <Link to=\"/subscriptions\" style={styles.link}>\n                                <Tooltip title=\"Subscriptions\">\n                                    <IconButton\n                                        id=\"subs-header-button\"\n                                        size=\"large\"\n                                        edge=\"start\"\n                                        color=\"inherit\"\n                                        aria-label=\"subscriptions\"\n                                    >\n                                        <FileCopyOutlinedIcon />\n                                    </IconButton>\n                                </Tooltip>\n                            </Link>\n                            <Link to=\"/profile\" style={styles.link}>\n                                <Tooltip title=\"Profile\">\n                                    <IconButton\n                                        id=\"profile-header-button\"\n                                        size=\"large\"\n                                        edge=\"start\"\n                                        color=\"inherit\"\n                                        aria-label=\"settings\"\n                                    >\n                                        <AccountCircleOutlinedIcon />\n                                    </IconButton>\n                                </Tooltip>\n                            </Link>\n                        </>\n                    )}\n                    {showLogin && (\n                        <Link to=\"/login\" style={styles.link}>\n                            <Button color=\"inherit\">Login</Button>\n                        </Link>\n                    )}\n                    {user && (\n                        <Link\n                            to={{ pathname: \"/\", state: { logout: true } }}\n                            style={styles.link}\n                        >\n                            <Tooltip title=\"Logout\">\n                                <IconButton\n                                    id=\"logout-header-button\"\n                                    size=\"large\"\n                                    edge=\"start\"\n                                    color=\"inherit\"\n                                    aria-label=\"logout\"\n                                >\n                                    <LogoutIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Link>\n                    )}\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n};\n\nconst styles = {\n    headerContainer: {\n        display: \"flex\",\n        // Requires use with \"as React.CSSProperties\" because \"row\" is cast as a string\n        // and cannot be coerced into the string literal matching FlexDirectionProperty\n        // https://github.com/cssinjs/jss/issues/1344\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        paddingBottom: 10,\n        flexGrow: 1,\n        position: \"sticky\",\n        top: 0,\n        zIndex: 100,\n        marginBottom: 20,\n    },\n    link: {\n        textDecoration: \"none\",\n        color: \"inherit\",\n        marginRight: 20,\n    },\n};\n","import SearchIcon from \"@mui/icons-material/Search\";\nimport Box from \"@mui/material/Box\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport InputBase from \"@mui/material/InputBase\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport Switch from \"@mui/material/Switch\";\nimport * as _ from \"lodash\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nconst Search = styled(\"div\")(({ theme }) => ({\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"80%\",\n}));\n\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: \"inherit\",\n    \"& .MuiInputBase-input\": {\n        padding: theme.spacing(1, 1, 1, 0),\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n        transition: theme.transitions.create(\"width\"),\n        width: \"100%\",\n        [theme.breakpoints.up(\"md\")]: {\n            width: \"20ch\",\n        },\n    },\n}));\n\ninterface Props {\n    onFreeChanged: (free: boolean) => void;\n    onSearchChanged: (query: string) => void;\n}\n\nexport const PostsFilter = (props: Props) => {\n    const { onFreeChanged, onSearchChanged } = props;\n\n    const [searchInputValue, setSearchInputValue] = useState<string>(\"\");\n    const [query, setQuery] = useState<string>(\"\");\n    const [free, setFree] = useState<boolean>(false);\n\n    const throttledQuery = useCallback(_.throttle(setQuery, 500), []);\n\n    const handleSearchChange = (e: any): void => {\n        setSearchInputValue(e.target.value);\n        throttledQuery(e.target.value);\n    };\n\n    const handleFreeChange = (e: any): void => {\n        setFree((free: boolean) => !free);\n    };\n\n    useEffect(() => {\n        onFreeChanged(free);\n    }, [free, onFreeChanged]);\n\n    useEffect(() => {\n        onSearchChanged(query);\n    }, [query, onSearchChanged]);\n\n    return (\n        <Box\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                marginTop: 10,\n            }}\n        >\n            <Search>\n                <SearchIconWrapper>\n                    <SearchIcon color=\"info\" />\n                </SearchIconWrapper>\n                <StyledInputBase\n                    id=\"search-bar\"\n                    placeholder=\"Search...\"\n                    inputProps={{ \"aria-label\": \"search\" }}\n                    value={searchInputValue}\n                    onChange={handleSearchChange}\n                />\n            </Search>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            id=\"free-posts-search-toggle\"\n                            checked={free}\n                            onChange={handleFreeChange}\n                            inputProps={{ \"aria-label\": \"controlled\" }}\n                        />\n                    }\n                    label=\"Free\"\n                />\n            </FormGroup>\n        </Box>\n    );\n};\n","// Add commas to number\nexport const numberWithCommas = (x: number) => {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// Make date string more readable\nexport const formatDateString = (\n  date: string,\n  monthType: \"short\" | \"long\" = \"long\"\n) => {\n  const dateObj = new Date(date);\n  const month = dateObj.toLocaleString(\"default\", { month: monthType });\n  const day = dateObj.getDate();\n  const year = dateObj.getFullYear();\n  return `${month} ${day}, ${year}`;\n};\n","import Chip from \"@mui/material/Chip\";\nimport React from \"react\";\n\ninterface Props {\n    premium: boolean;\n}\n\nexport const PriceChip = (props: Props) => {\n    const { premium } = props;\n\n    if (premium) {\n        return <Chip label=\"Premium\" color=\"warning\" variant=\"outlined\" />;\n    }\n    return <Chip label=\"Free\" color=\"success\" variant=\"outlined\" />;\n};\n","import EventIcon from \"@mui/icons-material/Event\";\nimport Card from \"@mui/material/Card\";\nimport CardActionArea from \"@mui/material/CardActionArea\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { formatDateString } from \"../utils/format\";\nimport { Post } from \"../utils/types\";\nimport { PriceChip } from \"./PriceChip\";\n\ninterface Props {\n    post: Post;\n}\n\nexport const PostCard = (props: Props) => {\n    const { post } = props;\n\n    const [redirect, setRedirect] = useState<string>(\"\");\n\n    const goToPost = (): void => {\n        setRedirect(`/posts/${post._id}`);\n    };\n\n    if (redirect) {\n        return <Redirect to={redirect} />;\n    }\n\n    return (\n        <Card className=\"post-card\" style={styles.card}>\n            <CardActionArea onClick={goToPost}>\n                <CardContent>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                            {post.title}\n                        </Typography>\n                        <PriceChip premium={post.premium} />\n                    </div>\n                    <Typography variant=\"h6\" component=\"h3\" gutterBottom>\n                        Written by:{\" \"}\n                        <Link\n                            to={`/users/${post.user.username}/blog`}\n                            style={{ textDecoration: \"none\" }}\n                        >\n                            {post.user.username}\n                        </Link>\n                    </Typography>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            flex: 1,\n                            alignItems: \"center\",\n                        }}\n                    >\n                        <EventIcon\n                            style={{\n                                color: \"rgba(0, 0, 0, 0.6)\",\n                                marginRight: 10,\n                            }}\n                        />\n                        <Typography\n                            variant=\"body2\"\n                            color=\"textSecondary\"\n                            component=\"p\"\n                        >\n                            {formatDateString(post.createdAt.toString())}\n                        </Typography>\n                    </div>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    );\n};\n\nconst styles = {\n    card: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n};\n","import Typography from \"@mui/material/Typography\";\nimport React from \"react\";\nimport { Post } from \"../utils/types\";\nimport { PostCard } from \"./PostCard\";\n\ninterface Props {\n    posts: Array<Post>;\n}\n\nexport const PostsList = (props: Props) => {\n    const { posts } = props;\n\n    return (\n        <div id=\"posts-list-container\">\n            {posts.length > 0 &&\n                posts.map((post: Post) => (\n                    <PostCard key={post._id} post={post} />\n                ))}\n\n            {posts.length === 0 && (\n                <Typography variant=\"body1\" gutterBottom>\n                    No posts found\n                </Typography>\n            )}\n        </div>\n    );\n};\n","import { useEffect } from \"react\";\nimport { regenerateAccessToken } from \"../utils/api\";\nimport { useStore } from \"../store/zstore\";\n\nexport const useAccessToken = (): string => {\n  const accessToken = useStore((state) => state.accessToken);\n  const setAccessToken = useStore((state) => state.setAccessToken);\n\n  useEffect(() => {\n    if (!accessToken) {\n      regenerateAccessToken().then((res) =>\n        setAccessToken(res === \"Invalid refresh token.\" ? \"\" : res)\n      );\n    }\n  }, [accessToken, setAccessToken]);\n\n  return accessToken;\n};\n","export const Colors = {\n  errorRed: \"#d32f2f\",\n  btcOrange: \"#f2a900\",\n};\n","import { faBitcoin } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Button from \"@mui/material/Button\";\nimport Pagination from \"@mui/material/Pagination\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useParams } from \"react-router-dom\";\nimport { PostsFilter } from \"../components/PostsFilter\";\nimport { PostsList } from \"../components/PostsList\";\nimport { useAccessToken } from \"../hooks/useAccessToken\";\nimport { useBlogPosts } from \"../hooks/useBlogPosts\";\nimport { usePublicUserInfo } from \"../hooks/usePublicUserInfo\";\nimport { useStore } from \"../store/zstore\";\nimport { rtaGetSubs, rtaSubscribe, rtaUnsubscribe } from \"../utils/api\";\nimport { Colors } from \"../utils/Colors\";\nimport { Subscription } from \"../utils/types\";\n\ntype BlogParams = {\n    username: string;\n};\n\nexport const Blog = () => {\n    const { username } = useParams<BlogParams>();\n    const publicUserInfo = usePublicUserInfo(username);\n    const user = useStore((state) => state.user);\n    const accessToken = useAccessToken();\n    const [page, setPage] = useState<number>(1);\n\n    const [search, setSearch] = useState<string>(\"\");\n    const [free, setFree] = useState<boolean>(false);\n    const { posts, totalPages } = useBlogPosts(username, page, free, search);\n\n    const isAuthor = publicUserInfo?._id === user?._id;\n    const [subs, setSubs] = useState<Array<Subscription>>([]);\n    const [sub, setSub] = useState<Subscription | null>(null);\n    const [subscribed, setSubscribed] = useState<boolean>(!!sub);\n\n    // Fetch subscriptions on mount, and when the user subscribes and unsubscribes\n    useEffect(() => {\n        if (accessToken) {\n            rtaGetSubs(accessToken).then((res: Array<Subscription>) =>\n                setSubs([...res])\n            );\n        }\n    }, [accessToken, subscribed]);\n\n    // Find the subscription for the current author when reader's subs are loaded\n    useEffect(() => {\n        if (subs) {\n            const s = subs.find((s) => s.author === publicUserInfo?._id);\n            if (s) {\n                setSub({ ...s });\n            } else {\n                setSub(null);\n            }\n        }\n    }, [subs, publicUserInfo]);\n\n    // Change subscribed state when sub changes\n    useEffect(() => {\n        if (sub) {\n            setSubscribed(true);\n        } else {\n            setSubscribed(false);\n        }\n    }, [sub]);\n\n    const handlePaginationChange = (\n        event: React.ChangeEvent<unknown>,\n        value: number\n    ): void => {\n        setPage(value);\n    };\n\n    const subscribe = async (): Promise<void> => {\n        if (!publicUserInfo) {\n            throw new Error(\"Cannot find author to subscribe to.\");\n        }\n\n        await rtaSubscribe(publicUserInfo._id, accessToken);\n        setSubscribed(true);\n    };\n\n    const unsubscribe = async (): Promise<void> => {\n        if (!sub) {\n            throw new Error(\"Cannot find subscription to delete.\");\n        }\n\n        await rtaUnsubscribe(sub._id, accessToken);\n        setSubscribed(false);\n    };\n\n    return (\n        <div id=\"blog-container\">\n            <Helmet>\n                <title>{`${publicUserInfo?.blog} - Brainstorm Press`}</title>\n            </Helmet>\n            <Typography variant=\"h3\" component=\"div\" gutterBottom>\n                {publicUserInfo?.blog}\n            </Typography>\n            {!isAuthor && !subscribed && (\n                <Button onClick={subscribe}>Subscribe</Button>\n            )}\n            {!isAuthor && subscribed && (\n                <Button onClick={unsubscribe}>Unsubscribe</Button>\n            )}\n            {publicUserInfo?.btcAddress && (\n                <Typography\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                    style={{ display: \"flex\", alignItems: \"center\" }}\n                    gutterBottom\n                >\n                    <FontAwesomeIcon\n                        style={{\n                            fontSize: 30,\n                            marginRight: 10,\n                            color: Colors.btcOrange,\n                        }}\n                        icon={faBitcoin}\n                    />\n                    {publicUserInfo?.btcAddress}\n                </Typography>\n            )}\n            <PostsFilter onFreeChanged={setFree} onSearchChanged={setSearch} />\n            <PostsList posts={posts} />\n            <Pagination\n                count={totalPages}\n                page={page}\n                onChange={handlePaginationChange}\n            />\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { rtaGetUser } from \"../utils/api\";\nimport { User } from \"../utils/types\";\nimport { useAccessToken } from \"./useAccessToken\";\n\nexport const usePublicUserInfo = (username: string): User | null => {\n  const [publicUser, setPublicUser] = useState<User | null>(null);\n\n  const accessToken = useAccessToken();\n\n  useEffect(() => {\n    if (username) {\n      rtaGetUser(username, accessToken).then((res) => setPublicUser(res));\n    }\n  }, [accessToken, username]);\n\n  return publicUser;\n};\n","import { useEffect, useState } from \"react\";\nimport { getUserPosts } from \"../utils/api\";\nimport { PaginatedPosts, PaginatedResponse } from \"../utils/types\";\n\nexport const useBlogPosts = (\n  username: string,\n  page: number,\n  free?: boolean,\n  search?: string\n): PaginatedPosts => {\n  const [posts, setPosts] = useState<PaginatedPosts>({\n    posts: [],\n    totalPages: 0,\n  });\n\n  useEffect(() => {\n    if (username) {\n      getUserPosts(\n        username,\n        page,\n        free,\n        search\n      ).then((res: PaginatedResponse) =>\n        setPosts({ posts: res.docs, totalPages: res.totalPages })\n      );\n    }\n  }, [username, page, free, search]);\n\n  return posts;\n};\n","import Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useStore } from \"../store/zstore\";\nimport { rtaConnectToLn } from \"../utils/api\";\n\nexport const ConnectToLnForm = () => {\n    const [hostInputValue, setHostInputValue] = useState<string>(\"\");\n    const [certInputValue, setCertInputValue] = useState<string>(\"\");\n    const [macaroonInputValue, setMacaroonInputValue] = useState<string>(\"\");\n\n    const accessToken = useStore((state) => state.accessToken);\n    const setLnToken = useStore((state) => state.setLnToken);\n\n    const [redirect, setRedirect] = useState<string>(\"\");\n\n    const handleHostInputChange = (event: any): void => {\n        setHostInputValue(event.target.value);\n    };\n\n    const handleCertInputChange = (event: any): void => {\n        setCertInputValue(event.target.value);\n    };\n\n    const handleMacaroonInputChange = (event: any): void => {\n        setMacaroonInputValue(event.target.value);\n    };\n\n    const connectToLn = async (): Promise<void> => {\n        const body = {\n            host: hostInputValue,\n            cert: certInputValue,\n            macaroon: macaroonInputValue,\n        };\n        const res = await rtaConnectToLn(body, accessToken);\n        setLnToken(res.token);\n        setRedirect(\"/settings\");\n    };\n\n    const cancel = (): void => {\n        setRedirect(\"/settings\");\n    };\n\n    if (redirect) {\n        return <Redirect to={redirect} />;\n    }\n\n    return (\n        <div id=\"connect-to-ln-form\">\n            <div id=\"host-input-container\">\n                <TextField\n                    id=\"host\"\n                    label=\"Host\"\n                    variant=\"filled\"\n                    onChange={handleHostInputChange}\n                    value={hostInputValue}\n                    style={styles.formField}\n                    fullWidth\n                    required\n                />\n            </div>\n            <div id=\"cert-input-container\">\n                <TextField\n                    id=\"tls-hex-cert\"\n                    label=\"TLS Certificate (HEX)\"\n                    variant=\"filled\"\n                    value={certInputValue}\n                    onChange={handleCertInputChange}\n                    style={styles.formField}\n                    maxRows={5}\n                    multiline\n                    fullWidth\n                    required\n                />\n            </div>\n            <div id=\"macaroon-input-container\">\n                <TextField\n                    id=\"macaroon\"\n                    label=\"Macaroon\"\n                    variant=\"filled\"\n                    value={macaroonInputValue}\n                    onChange={handleMacaroonInputChange}\n                    style={styles.formField}\n                    multiline\n                    fullWidth\n                    required\n                />\n\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    lncli bakemacaroon info:read offchain:read invoices:read\n                    invoices:write\n                </Typography>\n            </div>\n            <div id=\"connect-to-ln-submit-container\">\n                <Button\n                    variant=\"contained\"\n                    onClick={connectToLn}\n                    style={styles.button}\n                >\n                    Submit\n                </Button>\n                <Button\n                    variant=\"outlined\"\n                    onClick={cancel}\n                    style={styles.button}\n                >\n                    Cancel\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nconst styles = {\n    button: {\n        marginRight: 10,\n    },\n    formField: {\n        marginTop: 20,\n    },\n};\n","import Button from \"@mui/material/Button\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport Switch from \"@mui/material/Switch\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n    convertToRaw,\n    DraftHandleValue,\n    Editor,\n    EditorState,\n    RichUtils,\n} from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useAccessToken } from \"../hooks/useAccessToken\";\nimport { rtaCreatePost } from \"../utils/api\";\n\nexport const CreateNewPostForm = () => {\n    const [titleInputValue, setTitleInputValue] = useState<string>(\"\");\n    const [premium, setPremium] = useState<boolean>(false);\n    const accessToken = useAccessToken();\n\n    const [redirect, setRedirect] = useState<string>(\"\");\n\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n    const editor: any = React.useRef(null);\n    const focusEditor = () => {\n        editor?.current?.focus();\n    };\n\n    const handleTitleInputChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setTitleInputValue(event.target.value);\n    };\n\n    const publishPost = async (): Promise<void> => {\n        const body = {\n            title: titleInputValue,\n            content: JSON.stringify(\n                convertToRaw(editorState.getCurrentContent())\n            ),\n            premium: premium,\n            published: true,\n        };\n        const newPost = await rtaCreatePost(body, accessToken);\n        setRedirect(`/posts/${newPost._id}`);\n    };\n\n    const saveDraft = async (): Promise<void> => {\n        const body = {\n            title: titleInputValue,\n            content: JSON.stringify(\n                convertToRaw(editorState.getCurrentContent())\n            ),\n            premium: premium,\n            published: false,\n        };\n        await rtaCreatePost(body, accessToken);\n        setRedirect(\"/posts/drafts\");\n    };\n\n    const cancelPost = (): void => {\n        setRedirect(\"/\");\n    };\n\n    const handleKeyCommand = (\n        command: string,\n        editorState: EditorState,\n        eventTimeStamp: number\n    ): DraftHandleValue => {\n        const newEditorState = RichUtils.handleKeyCommand(editorState, command);\n\n        if (newEditorState) {\n            setEditorState(newEditorState);\n            return \"handled\";\n        }\n\n        return \"not-handled\";\n    };\n\n    if (redirect) {\n        return <Redirect to={redirect} />;\n    }\n\n    return (\n        <div id=\"edit-post-form\">\n            <Typography variant=\"h3\" gutterBottom>\n                Create New Post\n            </Typography>\n            <TextField\n                id=\"edit-post-title\"\n                label=\"Title\"\n                variant=\"filled\"\n                onChange={handleTitleInputChange}\n                value={titleInputValue}\n                style={styles.formField}\n                fullWidth\n                required\n            />\n\n            <div\n                style={{\n                    minHeight: \"6em\",\n                    cursor: \"text\",\n                    marginTop: 20,\n                    padding: 10,\n                }}\n                onClick={focusEditor}\n            >\n                <Editor\n                    ref={editor}\n                    editorState={editorState}\n                    onChange={setEditorState}\n                    handleKeyCommand={handleKeyCommand}\n                    placeholder=\"Write something!\"\n                />\n            </div>\n\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={premium}\n                            onChange={(event) =>\n                                setPremium(event.target.checked)\n                            }\n                            name=\"premium\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Premium\"\n                />\n            </FormGroup>\n\n            <div id=\"button-container\" style={styles.formField}>\n                <Button\n                    variant=\"contained\"\n                    onClick={publishPost}\n                    style={styles.button}\n                >\n                    Publish\n                </Button>\n                <Button\n                    variant=\"outlined\"\n                    onClick={saveDraft}\n                    style={styles.button}\n                >\n                    Save Draft\n                </Button>\n                <Button onClick={cancelPost} style={styles.button}>\n                    Cancel\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nconst styles = {\n    button: {\n        marginRight: 10,\n    },\n    formField: {\n        marginTop: 20,\n    },\n};\n","import Pagination from \"@mui/material/Pagination\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useState } from \"react\";\nimport { PostsList } from \"../components/PostsList\";\nimport { useDrafts } from \"../hooks/useDrafts\";\n\nexport const Drafts = () => {\n    const [page, setPage] = useState<number>(1);\n    const { posts, totalPages } = useDrafts(page);\n\n    const handlePaginationChange = (\n        event: React.ChangeEvent<unknown>,\n        value: number\n    ): void => {\n        setPage(value);\n    };\n\n    return (\n        <div id=\"drafts-container\">\n            <Typography variant=\"h3\" gutterBottom>\n                Drafts\n            </Typography>\n            <PostsList posts={posts} />\n            <Pagination\n                count={totalPages}\n                page={page}\n                onChange={handlePaginationChange}\n            />\n        </div>\n    );\n};\n","import { useStore } from \"../store/zstore\";\nimport { useEffect, useState } from \"react\";\nimport { rtaGetDrafts } from \"../utils/api\";\nimport { PaginatedPosts, PaginatedResponse } from \"../utils/types\";\nimport { useAccessToken } from \"./useAccessToken\";\n\nexport const useDrafts = (page: number): PaginatedPosts => {\n  const [drafts, setDrafts] = useState<PaginatedPosts>({\n    posts: [],\n    totalPages: 0,\n  });\n  const user = useStore((state) => state.user);\n  const accessToken = useAccessToken();\n\n  useEffect(() => {\n    if (accessToken && user) {\n      rtaGetDrafts(\n        user.username,\n        page,\n        accessToken\n      ).then((res: PaginatedResponse) =>\n        setDrafts({ posts: res.docs, totalPages: res.totalPages })\n      );\n    }\n  }, [page, accessToken, user]);\n\n  return drafts;\n};\n","import { useEffect, useState } from \"react\";\nimport { rtaGetPost } from \"../utils/api\";\nimport { Post } from \"../utils/types\";\nimport { useAccessToken } from \"./useAccessToken\";\n\nexport const usePost = (postId: string): Post | null => {\n  const [post, setPost] = useState<Post | null>(null);\n\n  const accessToken = useAccessToken();\n\n  useEffect(() => {\n    if (postId) {\n      rtaGetPost(postId, accessToken).then((res) => setPost(res));\n    }\n  }, [accessToken, postId]);\n\n  return post;\n};\n","import Button from \"@mui/material/Button\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport Switch from \"@mui/material/Switch\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n    convertFromRaw,\n    convertToRaw,\n    DraftHandleValue,\n    Editor,\n    EditorState,\n    RichUtils,\n} from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { useAccessToken } from \"../hooks/useAccessToken\";\nimport { usePost } from \"../hooks/usePost\";\nimport { rtaUpdatePost } from \"../utils/api\";\nimport { PostParams } from \"../utils/types\";\n\nexport const EditPost = () => {\n    const { postId } = useParams<PostParams>();\n    const post = usePost(postId);\n\n    const [editing, setEditing] = useState(true);\n\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n    const editor: any = React.useRef(null);\n    const focusEditor = () => {\n        editor?.current?.focus();\n    };\n\n    const [titleInputValue, setTitleInputValue] = useState<string>(\n        post?.title || \"\"\n    );\n    const [premium, setPremium] = useState<boolean>(post?.premium || false);\n\n    const accessToken = useAccessToken();\n\n    useEffect(() => {\n        if (post) {\n            setTitleInputValue(post.title);\n            setPremium(post.premium);\n            setEditorState(\n                EditorState.createWithContent(\n                    convertFromRaw(JSON.parse(post.content))\n                )\n            );\n        }\n    }, [post]);\n\n    const cancelEdits = (): void => {\n        setEditing(false);\n    };\n\n    const submitEdits = async (): Promise<void> => {\n        if (!post) {\n            throw new Error(\"Cannot find post to edit.\");\n        }\n\n        const body = {\n            title: titleInputValue,\n            content: JSON.stringify(\n                convertToRaw(editorState.getCurrentContent())\n            ),\n            premium: premium,\n            published: post.published,\n        };\n        await rtaUpdatePost(post._id, body, accessToken);\n        setEditing(false);\n    };\n\n    const handleTitleInputChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setTitleInputValue(event.target.value);\n    };\n\n    const handleKeyCommand = (\n        command: string,\n        editorState: EditorState,\n        eventTimeStamp: number\n    ): DraftHandleValue => {\n        const newEditorState = RichUtils.handleKeyCommand(editorState, command);\n\n        if (newEditorState) {\n            setEditorState(newEditorState);\n            return \"handled\";\n        }\n\n        return \"not-handled\";\n    };\n\n    if (!post) {\n        return (\n            <>\n                <Typography variant=\"h1\" gutterBottom>\n                    <Skeleton />\n                </Typography>\n                <Typography variant=\"h2\" gutterBottom>\n                    <Skeleton />\n                </Typography>\n                <Typography variant=\"body1\" gutterBottom>\n                    <Skeleton />\n                    <Skeleton />\n                    <Skeleton />\n                </Typography>\n            </>\n        );\n    }\n\n    if (!editing) {\n        return <Redirect to={`/posts/${post._id}`} />;\n    }\n\n    return (\n        <div id=\"edit-post-form\">\n            <TextField\n                id=\"edit-post-title\"\n                label=\"Title\"\n                variant=\"filled\"\n                onChange={handleTitleInputChange}\n                value={titleInputValue}\n                style={styles.formField}\n                fullWidth\n                required\n            />\n\n            <div\n                style={{\n                    minHeight: \"6em\",\n                    cursor: \"text\",\n                    marginTop: 20,\n                    padding: 10,\n                }}\n                onClick={focusEditor}\n            >\n                <Editor\n                    ref={editor}\n                    editorState={editorState}\n                    onChange={setEditorState}\n                    handleKeyCommand={handleKeyCommand}\n                    placeholder=\"Write something!\"\n                />\n            </div>\n\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={premium}\n                            onChange={(event) =>\n                                setPremium(event.target.checked)\n                            }\n                            name=\"premium\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Premium\"\n                />\n            </FormGroup>\n\n            <div id=\"button-container\" style={styles.formField}>\n                <Button\n                    variant=\"contained\"\n                    onClick={submitEdits}\n                    style={styles.button}\n                >\n                    Save\n                </Button>\n                <Button\n                    variant=\"outlined\"\n                    onClick={cancelEdits}\n                    style={styles.button}\n                >\n                    Cancel\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nconst styles = {\n    button: {\n        marginRight: 10,\n    },\n    formField: {\n        marginTop: 20,\n    },\n};\n","import ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport Accordion from \"@mui/material/Accordion\";\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport React from \"react\";\n\nconst questions = [\n    {\n        question: \"What is Brainstorm Press?\",\n        answer:\n            \"Brainstorm Press is a blogging platform. You can read and write posts, and subscribe to users.\",\n    },\n    {\n        question: \"What are premium posts?\",\n        answer:\n            \"Premium posts are locked unless you have a Premium Pass for the author.\",\n    },\n    {\n        question: \"What is a Premium Pass?\",\n        answer:\n            \"When you purchase a Premium Pass for an author, you get unlimited access to their premium posts for thirty days. Authors set their own price for their Premium Passes.\",\n    },\n    {\n        question: \"How do I purchase a Premium Pass?\",\n        answer:\n            \"If you try to read a premium post and you don't have an active Premium Pass for the author, you will be shown a Lightning invoice. Paying that invoice will buy you a thirty day Premium Pass for the author of the post you were trying to read.\",\n    },\n    {\n        question: \"Do I need bitcoin to use Brainstorm Press?\",\n        answer:\n            \"You can write as much as you want, and read all the free posts you like, without any bitcoin. In order to access premium posts, you will need some bitcoin to buy Premium Passes.\",\n    },\n    {\n        question: \"Do I need a Lightning node to use Brainstorm Press?\",\n        answer:\n            \"You only need a Lightning node if you are publishing premium posts. Every time a user purchases your Premium Pass, their payment goes directly to your node.\",\n    },\n    {\n        question: \"How do I report bugs or suggest features?\",\n        answer: \"Feel free to open an issue on our GitHub.\",\n    },\n];\n\nexport const Faq = () => {\n    return (\n        <Box>\n            <Typography variant=\"h2\" gutterBottom>\n                FAQ\n            </Typography>\n\n            {questions.map((q) => (\n                <Accordion key={q.question}>\n                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography variant=\"h5\" gutterBottom>\n                            {q.question}\n                        </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Typography variant=\"body1\" gutterBottom>\n                            {q.answer}\n                        </Typography>\n                    </AccordionDetails>\n                </Accordion>\n            ))}\n        </Box>\n    );\n};\n","import Pagination from \"@mui/material/Pagination\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { PostsFilter } from \"../components/PostsFilter\";\nimport { PostsList } from \"../components/PostsList\";\nimport { usePosts } from \"../hooks/usePosts\";\nimport { useStore } from \"../store/zstore\";\nimport { deleteRefreshToken } from \"../utils/api\";\n\nexport const Home = () => {\n    const location = useLocation<{ logout: boolean }>();\n    const { logout } = location.state || false;\n    const setUser = useStore((state) => state.setUser);\n    const setAccessToken = useStore((state) => state.setAccessToken);\n    const setLnToken = useStore((state) => state.setLnToken);\n\n    const [search, setSearch] = useState<string>(\"\");\n    const [free, setFree] = useState<boolean>(false);\n    const [page, setPage] = useState<number>(1);\n    const { posts, totalPages } = usePosts(page, free, search);\n\n    const handlePaginationChange = (\n        event: React.ChangeEvent<unknown>,\n        value: number\n    ): void => {\n        setPage(value);\n    };\n\n    useEffect(() => {\n        const destroySession = async (): Promise<void> => {\n            await deleteRefreshToken();\n            setLnToken(\"\");\n            setAccessToken(\"\");\n            setUser(null);\n        };\n\n        if (logout) {\n            destroySession();\n        }\n    }, [logout, setAccessToken, setLnToken, setUser]);\n\n    return (\n        <>\n            <PostsFilter onFreeChanged={setFree} onSearchChanged={setSearch} />\n            <PostsList posts={posts} />\n            <Pagination\n                count={totalPages}\n                page={page}\n                onChange={handlePaginationChange}\n            />\n        </>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { getPosts } from \"../utils/api\";\nimport { PaginatedPosts, PaginatedResponse } from \"../utils/types\";\n\nexport const usePosts = (\n  page: number,\n  free?: boolean,\n  search?: string\n): PaginatedPosts => {\n  const [paginatedPosts, setPaginatedPosts] = useState<PaginatedPosts>({\n    posts: [],\n    totalPages: 0,\n  });\n\n  useEffect(() => {\n    getPosts(page, free, search).then((res: PaginatedResponse) => {\n      setPaginatedPosts({\n        posts: res.docs,\n        totalPages: res.totalPages,\n      });\n    });\n  }, [page, free, search]);\n\n  return paginatedPosts;\n};\n","import Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useStore } from \"../store/zstore\";\nimport { loginUser } from \"../utils/api\";\nimport { Colors } from \"../utils/Colors\";\n\nconst theme = createTheme();\n\nexport const LogIn = () => {\n    const [email, setEmail] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n\n    const [redirect, setRedirect] = useState<string>(\"\");\n    const [formError, setFormError] = useState<string>(\"\");\n\n    const setUser = useStore((state) => state.setUser);\n    const setAccessToken = useStore((state) => state.setAccessToken);\n    const setLnToken = useStore((state) => state.setLnToken);\n\n    const handleSubmit = async (\n        event: React.FormEvent<HTMLFormElement>\n    ): Promise<void> => {\n        event.preventDefault();\n        const body = {\n            email: email,\n            password: password,\n        };\n        const response = await loginUser(body);\n        if (\"error\" in response) {\n            setFormError(response.error);\n        } else {\n            setFormError(\"\");\n            setUser(response.user);\n            setAccessToken(response.accessToken);\n            if (response.user.node) {\n                setLnToken(response.user.node.token);\n            }\n            setRedirect(\"/\");\n        }\n    };\n\n    const handleForgotPassword = async (): Promise<void> => {\n        setRedirect(\"/reset-password\");\n    };\n\n    if (redirect) {\n        return <Redirect to={redirect} />;\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Log in\n                    </Typography>\n                    <Box\n                        component=\"form\"\n                        onSubmit={handleSubmit}\n                        noValidate\n                        sx={{ mt: 1 }}\n                    >\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            error={!!formError}\n                            autoFocus\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                            error={!!formError}\n                            inputProps={{ \"data-testid\": \"password\" }}\n                        />\n\n                        {formError && (\n                            <Typography\n                                variant=\"subtitle1\"\n                                component=\"div\"\n                                style={{ color: Colors.errorRed }}\n                                gutterBottom\n                            >\n                                Invalid credentials.\n                            </Typography>\n                        )}\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Log In\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link\n                                    href=\"#\"\n                                    variant=\"body2\"\n                                    onClick={handleForgotPassword}\n                                >\n                                    Forgot password?\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link href=\"/signup\" variant=\"body2\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n};\n","import Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Divider from \"@mui/material/Divider\";\nimport Paper from \"@mui/material/Paper\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport Typography from \"@mui/material/Typography\";\nimport { convertFromRaw, Editor, EditorState } from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport QRCode from \"react-qr-code\";\nimport { Link, Redirect, useParams } from \"react-router-dom\";\nimport { useAccessToken } from \"../hooks/useAccessToken\";\nimport { usePost } from \"../hooks/usePost\";\nimport { useStore } from \"../store/zstore\";\nimport {\n    rtaCheckPremiumAccess,\n    rtaCreateInvoice,\n    rtaDeletePost,\n    rtaGetNodeStatus,\n    rtaLogPayment,\n    rtaUpdatePost,\n} from \"../utils/api\";\nimport { formatDateString } from \"../utils/format\";\nimport { Invoice, NodeStatus, PostParams } from \"../utils/types\";\n\nexport const Post = () => {\n    const { postId } = useParams<PostParams>();\n    const post = usePost(postId);\n\n    const [editing, setEditing] = useState(false);\n    const [redirect, setRedirect] = useState(\"\");\n    const [paid, setPaid] = useState(false);\n    const [invoice, setInvoice] = useState<Invoice | null>(null);\n    const [checkedAccess, setCheckedAccess] = useState(false);\n\n    const [loading, setLoading] = useState<boolean>(true);\n\n    const user = useStore((state) => state.user);\n    const accessToken = useAccessToken();\n    const isCreator = post?.user?._id === user?._id;\n\n    const [postNodeStatus, setPostNodeStatus] = useState<NodeStatus>(\n        \"Looking.\"\n    );\n\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n    const editor: any = React.useRef(null);\n\n    useEffect(() => {\n        if (post) {\n            setEditorState(\n                EditorState.createWithContent(\n                    convertFromRaw(JSON.parse(post.content))\n                )\n            );\n        }\n    }, [post]);\n\n    useEffect(() => {\n        if (post && postNodeStatus !== \"Looking.\") {\n            setLoading(false);\n        }\n    }, [post, postNodeStatus]);\n\n    useEffect(() => {\n        if (post && post.user.node) {\n            rtaGetNodeStatus(\n                post.user.node.toString(),\n                accessToken\n            ).then((res) => setPostNodeStatus(res));\n        }\n\n        if (post && !post.user.node) {\n            setPostNodeStatus(\"Not found.\");\n        }\n    }, [post, accessToken]);\n\n    useEffect(() => {\n        const createInvoice = async () => {\n            if (!user) {\n                throw new Error(\"Cannot create invoice without a user.\");\n            }\n\n            const response = await rtaCreateInvoice(postId, accessToken);\n            setInvoice({\n                payreq: response.payreq,\n                hash: response.hash,\n                amount: response.amount,\n            });\n        };\n\n        if (\n            post &&\n            user &&\n            post.user.subscriptionPrice > 0 &&\n            !paid &&\n            !invoice &&\n            !isCreator &&\n            postNodeStatus === \"Connected.\" &&\n            checkedAccess\n        ) {\n            createInvoice();\n        }\n    }, [\n        post,\n        user,\n        paid,\n        invoice,\n        postNodeStatus,\n        checkedAccess,\n        isCreator,\n        accessToken,\n        postId,\n    ]);\n\n    useEffect(() => {\n        if (post && accessToken) {\n            rtaCheckPremiumAccess(post.user._id, accessToken).then((res) => {\n                setPaid(res.paid);\n                setCheckedAccess(true);\n            });\n        }\n    }, [post, accessToken]);\n\n    useEffect(() => {\n        if (post) {\n            const wsUrl =\n                process.env.NODE_ENV === \"production\"\n                    ? \"brainstorm-press-api.herokuapp.com\"\n                    : \"localhost:4000\";\n            // TODO: Use wss\n            const webSocket = new WebSocket(`ws://${wsUrl}/api/events`);\n            webSocket.onopen = () => {\n                console.debug(\"Connected to web socket.\");\n            };\n            webSocket.onmessage = async (event) => {\n                console.log(\"ws onmessage, post:\", post);\n                const eventData = JSON.parse(event.data);\n                if (eventData.type === \"invoice-paid\") {\n                    if (!post) {\n                        throw new Error(\"Cannot log payment without a post.\");\n                    }\n                    setPaid(true);\n                    const body = {\n                        hash: eventData.data.hash,\n                    };\n                    rtaLogPayment(post.user._id, body, accessToken);\n                }\n            };\n        }\n    }, [post, accessToken]);\n\n    const editPost = (): void => {\n        if (isCreator) {\n            setEditing(true);\n        }\n    };\n\n    const publishPost = async (): Promise<void> => {\n        if (!post) {\n            throw new Error(\"Cannot find post to publish.\");\n        }\n\n        if (!user) {\n            throw new Error(\"Cannot publish post without a user.\");\n        }\n\n        const body = { ...post, published: true };\n        await rtaUpdatePost(post._id, body, accessToken);\n        setRedirect(\"/posts/drafts\");\n    };\n\n    const deletePost = async (): Promise<void> => {\n        if (!post) {\n            throw new Error(\"Cannot find post to delete.\");\n        }\n\n        await rtaDeletePost(post._id, accessToken);\n        setRedirect(\"/\");\n    };\n\n    const LoadingPostSkeleton = () => {\n        return (\n            <>\n                <Typography variant=\"h3\" gutterBottom>\n                    <Skeleton />\n                </Typography>\n                <Typography variant=\"h4\" gutterBottom>\n                    <Skeleton />\n                </Typography>\n                <Typography variant=\"body1\" gutterBottom>\n                    <Skeleton />\n                    <Skeleton />\n                    <Skeleton />\n                </Typography>\n            </>\n        );\n    };\n\n    const Paywall = () => {\n        return (\n            <>\n                <Typography variant=\"h3\" component=\"div\" gutterBottom>\n                    {post?.title}\n                </Typography>\n                <Paper\n                    elevation={3}\n                    style={{\n                        padding: 20,\n                        maxWidth: \"500px\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                    }}\n                >\n                    <Typography variant=\"h5\" component=\"div\" gutterBottom>\n                        This is a premium post.\n                    </Typography>\n                    <Typography variant=\"h6\" component=\"div\" gutterBottom>\n                        Pay {invoice?.amount} sats to get access to all of{\" \"}\n                        {post?.user.username}'s premium posts for thirty days.\n                    </Typography>\n                    <Box\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            margin: 20,\n                        }}\n                    >\n                        <QRCode value={invoice?.payreq || \"\"} />\n                    </Box>\n                    <Typography\n                        variant=\"body1\"\n                        component=\"div\"\n                        style={{ wordWrap: \"break-word\" }}\n                        gutterBottom\n                    >\n                        {invoice?.payreq}\n                    </Typography>\n                </Paper>\n            </>\n        );\n    };\n\n    const showPaywall: boolean = !!(\n        post &&\n        !isCreator &&\n        !paid &&\n        post.premium &&\n        invoice &&\n        !editing\n    );\n\n    const showPost: boolean = !!(\n        post &&\n        postNodeStatus !== \"Looking.\" &&\n        (isCreator ||\n            paid ||\n            !post.premium ||\n            postNodeStatus === \"Not found.\" ||\n            post.user.subscriptionPrice === 0) &&\n        !editing\n    );\n\n    const PostContent = () => {\n        if (!post) {\n            return <></>;\n        }\n\n        return (\n            <>\n                <Typography variant=\"h3\" component=\"div\" gutterBottom>\n                    {post.title}\n                </Typography>\n\n                <div\n                    style={{\n                        display: \"flex\",\n                        flex: 1,\n                        alignItems: \"center\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    <div\n                        style={{\n                            display: \"flex\",\n                            flex: 1,\n                            alignItems: \"center\",\n                        }}\n                    >\n                        <Typography\n                            variant=\"body2\"\n                            color=\"textSecondary\"\n                            component=\"p\"\n                        >\n                            <Link\n                                to={`/users/${post.user.username}/blog`}\n                                style={{ textDecoration: \"none\" }}\n                            >\n                                {post.user.username}\n                            </Link>{\" \"}\n                            &#183;{\" \"}\n                            {formatDateString(\n                                post.createdAt.toString(),\n                                \"short\"\n                            )}\n                        </Typography>\n                    </div>\n                    {isCreator && (\n                        <div className=\"post-actions\">\n                            {!post?.published && (\n                                <Button\n                                    className=\"publish-post\"\n                                    onClick={publishPost}\n                                >\n                                    Publish\n                                </Button>\n                            )}\n                            <Button className=\"edit-post\" onClick={editPost}>\n                                Edit\n                            </Button>\n                            <Button\n                                className=\"delete-post\"\n                                onClick={deletePost}\n                            >\n                                Delete\n                            </Button>\n                        </div>\n                    )}\n                </div>\n\n                <Divider\n                    variant=\"middle\"\n                    style={{ marginTop: 20, marginBottom: 20 }}\n                />\n\n                <Typography variant=\"body1\" component=\"div\" gutterBottom>\n                    <Editor\n                        ref={editor}\n                        editorState={editorState}\n                        onChange={setEditorState}\n                        readOnly={true}\n                    />\n                </Typography>\n            </>\n        );\n    };\n\n    if (redirect) {\n        return <Redirect to=\"/\" />;\n    }\n\n    if (editing) {\n        return <Redirect to={`/posts/${postId}/edit`} />;\n    }\n\n    if (!user && post && post.premium) {\n        return (\n            <Box>\n                <Typography variant=\"h6\" component=\"div\" gutterBottom>\n                    You have to be logged in to read paywalled posts.\n                </Typography>\n                <Link to=\"/login\">Log in</Link>\n            </Box>\n        );\n    }\n\n    return (\n        <div id=\"post-container\">\n            <Helmet>\n                <title>\n                    {`${post?.title} - ${post?.user.username} - Brainstorm Press`}\n                </title>\n            </Helmet>\n            {loading && <LoadingPostSkeleton />}\n\n            {showPaywall && <Paywall />}\n\n            {showPost && (\n                <>\n                    <PostContent />\n                </>\n            )}\n        </div>\n    );\n};\n","import { faBitcoin } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport BoltIcon from \"@mui/icons-material/Bolt\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Chip from \"@mui/material/Chip\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useNodeInfo } from \"../hooks/useNodeInfo\";\nimport { useStore } from \"../store/zstore\";\nimport { Colors } from \"../utils/Colors\";\nimport { numberWithCommas } from \"../utils/format\";\nimport { NodeInfo } from \"../utils/types\";\n\nexport const Profile = () => {\n    const user = useStore((state) => state.user);\n    const lnToken = useStore((state) => state.lnToken);\n    const [redirect, setRedirect] = useState<string>(\"\");\n    const nodeInfo: NodeInfo | null = useNodeInfo(lnToken);\n\n    const NodeStatusChip = () => {\n        return (\n            <Chip\n                icon={<BoltIcon />}\n                label={\n                    !!nodeInfo\n                        ? \"Lightning node connected\"\n                        : \"Lightning node not connected\"\n                }\n                color={!!nodeInfo ? \"success\" : \"error\"}\n                variant=\"outlined\"\n            />\n        );\n    };\n\n    if (redirect) {\n        return <Redirect to={redirect} />;\n    }\n\n    return (\n        <div id=\"settings-container\">\n            <Typography variant=\"h3\" gutterBottom>\n                Welcome, {user?.username}.\n            </Typography>\n\n            <NodeStatusChip />\n\n            <br />\n            <br />\n\n            {!!nodeInfo && (\n                <Chip\n                    icon={\n                        <FontAwesomeIcon\n                            style={{\n                                fontSize: 22,\n                                color: Colors.btcOrange,\n                            }}\n                            icon={faBitcoin}\n                        />\n                    }\n                    label={`Balance: ${numberWithCommas(\n                        nodeInfo?.balance || 0\n                    )} sats`}\n                    color=\"warning\"\n                    variant=\"outlined\"\n                />\n            )}\n\n            <Box\n                style={{\n                    display: \"flex\",\n                    flex: 1,\n                    flexDirection: \"row\",\n                    marginTop: 30,\n                }}\n            >\n                <Button\n                    onClick={() => setRedirect(\"/drafts\")}\n                    style={{ marginRight: 10 }}\n                >\n                    Drafts\n                </Button>\n                <Button onClick={() => setRedirect(\"/settings\")}>\n                    Settings\n                </Button>\n            </Box>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { getNodeInfo } from \"../utils/api\";\nimport { NodeInfo } from \"../utils/types\";\n\nexport const useNodeInfo = (lnToken: string): NodeInfo | null => {\n  const [nodeInfo, setNodeInfo] = useState<NodeInfo | null>(null);\n\n  useEffect(() => {\n    if (lnToken) {\n      getNodeInfo(lnToken).then((res) => setNodeInfo(res));\n    } else {\n      setNodeInfo(null);\n    }\n  }, [lnToken]);\n\n  return nodeInfo;\n};\n","import Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useState } from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { resetPassword } from \"../utils/api\";\nimport { Colors } from \"../utils/Colors\";\n\nconst theme = createTheme();\n\ntype ResetPasswordParams = {\n    userId: string;\n    token: string;\n};\n\nexport const ResetPassword = () => {\n    const { userId, token } = useParams<ResetPasswordParams>();\n    const [password, setPassword] = useState<string>(\"\");\n    const [passwordConfirmation, setPasswordConfirmation] = useState<string>(\n        \"\"\n    );\n\n    const [redirect, setRedirect] = useState<string>(\"\");\n    const [formError, setFormError] = useState<string>(\"\");\n\n    const handleSubmit = async (\n        event: React.FormEvent<HTMLFormElement>\n    ): Promise<void> => {\n        event.preventDefault();\n        if (password !== passwordConfirmation) {\n            setFormError(\"Passwords do not match.\");\n        } else {\n            const body = {\n                password: password,\n            };\n            await resetPassword(body, userId, token);\n            setFormError(\"\");\n            setRedirect(\"/login\");\n        }\n    };\n\n    if (redirect) {\n        return <Redirect to={redirect} />;\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Choose a new password\n                    </Typography>\n                    <Box\n                        component=\"form\"\n                        onSubmit={handleSubmit}\n                        noValidate\n                        sx={{ mt: 1 }}\n                    >\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"password\"\n                            label=\"Password\"\n                            name=\"password\"\n                            autoComplete=\"password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                            error={!!formError}\n                            autoFocus\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password-confirmation\"\n                            label=\"Confirm Password\"\n                            type=\"password\"\n                            id=\"password-confirmation\"\n                            value={passwordConfirmation}\n                            onChange={(e) =>\n                                setPasswordConfirmation(e.target.value)\n                            }\n                            error={!!formError}\n                        />\n\n                        {formError && (\n                            <Typography\n                                variant=\"subtitle1\"\n                                component=\"div\"\n                                style={{ color: Colors.errorRed }}\n                                gutterBottom\n                            >\n                                {formError}\n                            </Typography>\n                        )}\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Reset Password\n                        </Button>\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n};\n","import Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useState } from \"react\";\nimport { sendResetPasswordEmail } from \"../utils/api\";\n\nconst theme = createTheme();\n\nexport const SendResetPasswordEmail = () => {\n    const [email, setEmail] = useState<string>(\"\");\n    const [submitted, setSubmitted] = useState<boolean>(false);\n\n    const handleSubmit = async (\n        event: React.FormEvent<HTMLFormElement>\n    ): Promise<void> => {\n        event.preventDefault();\n        await sendResetPasswordEmail(email);\n        setSubmitted(true);\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Typography component=\"h1\" variant=\"h5\">\n                        {submitted ? \"Check your email\" : \"Reset your password\"}\n                    </Typography>\n                    <Box\n                        component=\"form\"\n                        onSubmit={handleSubmit}\n                        noValidate\n                        sx={{ mt: 1 }}\n                    >\n                        {!submitted && (\n                            <TextField\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                                autoFocus\n                            />\n                        )}\n                        {submitted && (\n                            <Typography\n                                variant=\"subtitle1\"\n                                component=\"div\"\n                                gutterBottom\n                            >\n                                If there is an account associated with that\n                                email, we've sent an email there with a link you\n                                can use to reset your password.\n                            </Typography>\n                        )}\n                        {!submitted && (\n                            <Button\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                sx={{ mt: 3, mb: 2 }}\n                            >\n                                Send Email\n                            </Button>\n                        )}\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n};\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport TextField from \"@mui/material/TextField\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Typography from \"@mui/material/Typography\";\nimport { validate } from \"bitcoin-address-validation\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useAccessToken } from \"../hooks/useAccessToken\";\nimport { useStore } from \"../store/zstore\";\nimport { disconnectNode, rtaDeleteUser, rtaUpdateUser } from \"../utils/api\";\n\nexport const Settings = () => {\n    const user = useStore((state) => state.user);\n    const setUser = useStore((state) => state.setUser);\n    const accessToken = useAccessToken();\n    const setAccessToken = useStore((state) => state.setAccessToken);\n    const lnToken = useStore((state) => state.lnToken);\n    const setLnToken = useStore((state) => state.setLnToken);\n\n    const [saved, setSaved] = useState(false);\n\n    const [redirect, setRedirect] = useState<string>(\"\");\n\n    const [email, setEmail] = useState<string>(user?.email || \"\");\n    const [blogTitle, setBlogTitle] = useState<string>(user?.blog || \"\");\n    const [btcAddress, setBtcAddress] = useState<string>(\n        user?.btcAddress || \"\"\n    );\n    const [subscriptionPrice, setSubscriptionPrice] = useState<number>(\n        user?.subscriptionPrice || 0\n    );\n\n    const [btcAddressInvalid, setBtcAddressInvalid] = useState<boolean>(false);\n\n    const [showDeleteAccountDialog, setShowDeleteAccountDialog] = useState<\n        boolean\n    >(false);\n\n    const handleEmailChange = (event: any): void => {\n        setEmail(event.target.value);\n    };\n\n    const handleBlogInputChange = (event: any): void => {\n        setBlogTitle(event.target.value);\n    };\n\n    const handleBtcAddressInputChange = (event: any): void => {\n        setBtcAddress(event.target.value);\n    };\n\n    const handleSubscriptionPriceChange = (event: any): void => {\n        const newPrice: number = parseInt(event.target.value, 10) || 0;\n        setSubscriptionPrice(newPrice);\n    };\n\n    const promptToDeleteAccount = (): void => {\n        setShowDeleteAccountDialog(true);\n    };\n\n    const deleteAccount = async (): Promise<void> => {\n        if (!user) {\n            throw new Error(\"Cannot delete user if no user is present.\");\n        }\n\n        await rtaDeleteUser(user._id, accessToken);\n        setUser(null);\n        setAccessToken(\"\");\n        setLnToken(\"\");\n        setRedirect(\"/\");\n    };\n\n    const submitEdits = (): void => {\n        let res;\n        if (user) {\n            if (btcAddress && !validate(btcAddress)) {\n                setBtcAddressInvalid(true);\n            } else if (btcAddress && validate(btcAddress)) {\n                setBtcAddressInvalid(false);\n                const body = {\n                    email: email,\n                    blog: blogTitle,\n                    subscriptionPrice: subscriptionPrice,\n                    btcAddress: btcAddress,\n                };\n                res = rtaUpdateUser(user._id, body, accessToken);\n            } else {\n                const body = {\n                    email: email,\n                    blog: blogTitle,\n                    subscriptionPrice: subscriptionPrice,\n                };\n                res = rtaUpdateUser(user._id, body, accessToken);\n            }\n        }\n        if (res) {\n            setSaved(true);\n        }\n    };\n\n    useEffect(() => {\n        if (!blogTitle && user?.blog) {\n            setBlogTitle(user?.blog);\n        }\n        if (!email && user?.email) {\n            setEmail(user?.email);\n        }\n        if (!subscriptionPrice && user?.subscriptionPrice) {\n            setSubscriptionPrice(user?.subscriptionPrice);\n        }\n    }, [user, blogTitle, email, subscriptionPrice]);\n\n    const goToConnectToLn = (): void => {\n        setRedirect(\"/connect-to-ln\");\n    };\n\n    const closeSnackbarAction = (\n        <IconButton\n            size=\"small\"\n            onClick={() => setSaved(false)}\n            color=\"inherit\"\n        >\n            <CloseIcon fontSize=\"small\" />\n        </IconButton>\n    );\n\n    if (redirect) {\n        return <Redirect to={redirect} />;\n    }\n\n    return (\n        <div id=\"settings-container\">\n            <Typography variant=\"h3\" gutterBottom>\n                Settings\n            </Typography>\n\n            <Typography\n                variant=\"body1\"\n                component=\"div\"\n                style={{ marginBottom: 20 }}\n                gutterBottom\n            >\n                Welcome {user?.username}\n            </Typography>\n\n            <TextField\n                id=\"edit-email\"\n                label=\"Email\"\n                variant=\"outlined\"\n                onChange={handleEmailChange}\n                value={email}\n                fullWidth\n            />\n\n            <br />\n            <br />\n\n            <TextField\n                id=\"edit-blog-title\"\n                label=\"Blog\"\n                variant=\"outlined\"\n                onChange={handleBlogInputChange}\n                value={blogTitle}\n                fullWidth\n            />\n\n            <br />\n            <br />\n\n            <Tooltip title=\"Monthly price readers pay to access your premium posts\">\n                <TextField\n                    id=\"edit-subscription-price\"\n                    label=\"Premium Pass Price (sats)\"\n                    variant=\"outlined\"\n                    onChange={handleSubscriptionPriceChange}\n                    value={subscriptionPrice}\n                    fullWidth\n                />\n            </Tooltip>\n\n            <br />\n            <br />\n\n            {btcAddressInvalid && (\n                <TextField\n                    error\n                    id=\"edit-btc-address-invalid\"\n                    label=\"BTC Address\"\n                    variant=\"outlined\"\n                    onChange={handleBtcAddressInputChange}\n                    value={btcAddress}\n                    helperText=\"Invalid BTC address\"\n                    fullWidth\n                />\n            )}\n\n            {!btcAddressInvalid && (\n                <TextField\n                    id=\"edit-btc-address\"\n                    label=\"BTC Address\"\n                    variant=\"outlined\"\n                    onChange={handleBtcAddressInputChange}\n                    value={btcAddress}\n                    fullWidth\n                />\n            )}\n\n            <br />\n            <br />\n\n            <Box style={{ display: \"flex\", flex: 1, flexDirection: \"row\" }}>\n                <Button\n                    variant=\"contained\"\n                    onClick={submitEdits}\n                    style={{ marginRight: 15 }}\n                >\n                    Save Changes\n                </Button>\n\n                {!lnToken && (\n                    <Button\n                        variant=\"outlined\"\n                        onClick={goToConnectToLn}\n                        style={{ marginRight: 15 }}\n                    >\n                        Connect to Lightning\n                    </Button>\n                )}\n\n                {lnToken && (\n                    <Button\n                        variant=\"outlined\"\n                        color=\"error\"\n                        onClick={() => {\n                            disconnectNode(lnToken);\n                            setLnToken(\"\");\n                        }}\n                        style={{ marginRight: 15 }}\n                    >\n                        Disconnect Lightning Node\n                    </Button>\n                )}\n\n                <Button\n                    id=\"prompt-to-delete-account\"\n                    variant=\"outlined\"\n                    color=\"error\"\n                    onClick={promptToDeleteAccount}\n                    style={{ marginRight: 15 }}\n                >\n                    Delete Account\n                </Button>\n            </Box>\n\n            <Snackbar\n                open={saved}\n                autoHideDuration={3000}\n                onClose={() => setSaved(false)}\n                message=\"Saved changes successfully.\"\n                action={closeSnackbarAction}\n            />\n\n            <Dialog\n                open={showDeleteAccountDialog}\n                onClose={() => setShowDeleteAccountDialog(false)}\n            >\n                <DialogTitle>\n                    Are you sure you want to delete your account?\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Deleting your account permanently deletes all of your\n                        user data, including your posts, Lightning node data,\n                        and all transaction records.\n                    </DialogContentText>\n                    <DialogActions>\n                        <Button\n                            onClick={() => setShowDeleteAccountDialog(false)}\n                        >\n                            Cancel\n                        </Button>\n                        <Button id=\"delete-account\" onClick={deleteAccount}>\n                            Delete Account\n                        </Button>\n                    </DialogActions>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n};\n","// Validate email\nexport const isValidEmail = (email: string) => {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n};\n","import Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Grid from \"@mui/material/Grid\";\nimport Link from \"@mui/material/Link\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useStore } from \"../store/zstore\";\nimport { createUser } from \"../utils/api\";\nimport { Colors } from \"../utils/Colors\";\nimport { isValidEmail } from \"../utils/validation\";\n\nconst theme = createTheme();\n\nexport const SignUp = () => {\n    const [username, setUsername] = useState<string>(\"\");\n    const [email, setEmail] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n\n    const [invalidUsername, setInvalidUsername] = useState<string>(\"\");\n    const [invalidEmail, setInvalidEmail] = useState<string>(\"\");\n    const [invalidPassword, setInvalidPassword] = useState<string>(\"\");\n    const [formError, setFormError] = useState<string>(\"\");\n\n    const user = useStore((state) => state.user);\n    const setUser = useStore((state) => state.setUser);\n    const setAccessToken = useStore((state) => state.setAccessToken);\n\n    const clearErrors = (): void => {\n        setInvalidUsername(\"\");\n        setInvalidEmail(\"\");\n        setInvalidPassword(\"\");\n        setFormError(\"\");\n    };\n\n    const handleUsernameChange = (e: any): void => {\n        setUsername(e.target.value.replace(/[^a-zA-Z0-9_-]/gi, \"\"));\n    };\n\n    const handleSubmit = async (\n        event: React.FormEvent<HTMLFormElement>\n    ): Promise<void> => {\n        event.preventDefault();\n        if (isValidEmail(email)) {\n            const body = {\n                username: username,\n                email: email,\n                password: password,\n                blog: `${username}'s Blog`,\n            };\n            const response = await createUser(body);\n            if (\"error\" in response) {\n                switch (response.error) {\n                    case \"Invalid username.\":\n                        setInvalidUsername(\n                            \"Invalid username. Usernames may only contain letters, numbers, hyphens, and underscores.\"\n                        );\n                        break;\n                    case \"Username taken.\":\n                        setInvalidUsername(\"Username not available.\");\n                        break;\n                    case \"Email taken.\":\n                        setInvalidEmail(\"Email already in use. Please log in.\");\n                        break;\n                    default:\n                        setFormError(response.error);\n                }\n            } else {\n                clearErrors();\n                setUser(response.user);\n                setAccessToken(response.accessToken);\n            }\n        } else {\n            setInvalidEmail(\"Please enter a valid email address.\");\n        }\n    };\n\n    if (user) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign up\n                    </Typography>\n                    <Box\n                        component=\"form\"\n                        noValidate\n                        onSubmit={handleSubmit}\n                        sx={{ mt: 3 }}\n                    >\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    autoComplete=\"username\"\n                                    name=\"username\"\n                                    required\n                                    fullWidth\n                                    id=\"username\"\n                                    label=\"Username\"\n                                    value={username}\n                                    onChange={handleUsernameChange}\n                                    error={!!invalidUsername || !!formError}\n                                    helperText={invalidUsername}\n                                    autoFocus\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    autoComplete=\"email\"\n                                    name=\"email\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email\"\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                    error={!!invalidEmail || !!formError}\n                                    helperText={invalidEmail}\n                                    autoFocus\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"new-password\"\n                                    value={password}\n                                    onChange={(e) =>\n                                        setPassword(e.target.value)\n                                    }\n                                    error={!!invalidPassword || !!formError}\n                                    helperText={invalidPassword}\n                                    inputProps={{ \"data-testid\": \"password\" }}\n                                />\n                            </Grid>\n                            {formError && (\n                                <Grid item xs={12}>\n                                    <Typography\n                                        variant=\"subtitle1\"\n                                        component=\"div\"\n                                        style={{ color: Colors.errorRed }}\n                                        gutterBottom\n                                    >\n                                        {formError}\n                                    </Typography>\n                                </Grid>\n                            )}\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Sign Up\n                        </Button>\n                        <Grid container justifyContent=\"flex-end\">\n                            <Grid item>\n                                <Link href=\"/login\" variant=\"body2\">\n                                    Already have an account? Log in\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n};\n","import Pagination from \"@mui/material/Pagination\";\nimport React, { useState } from \"react\";\nimport { PostsList } from \"../components/PostsList\";\nimport { usePostsFromSubs } from \"../hooks/usePostsFromSubs\";\n\nexport const Subs = () => {\n    const [page, setPage] = useState<number>(1);\n    const { posts, totalPages } = usePostsFromSubs(page);\n\n    const handlePaginationChange = (\n        event: React.ChangeEvent<unknown>,\n        value: number\n    ): void => {\n        setPage(value);\n    };\n\n    return (\n        <div id=\"subs-container\">\n            <h3>Subscriptions</h3>\n            <PostsList posts={posts} />\n            <Pagination\n                count={totalPages}\n                page={page}\n                onChange={handlePaginationChange}\n            />\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { rtaGetPostsFromSubs } from \"../utils/api\";\nimport { PaginatedPosts, PaginatedResponse } from \"../utils/types\";\nimport { useAccessToken } from \"./useAccessToken\";\n\nexport const usePostsFromSubs = (page: number): PaginatedPosts => {\n  const [posts, setPosts] = useState<PaginatedPosts>({\n    posts: [],\n    totalPages: 0,\n  });\n  const accessToken = useAccessToken();\n\n  useEffect(() => {\n    if (accessToken) {\n      rtaGetPostsFromSubs(page, accessToken).then((res: PaginatedResponse) =>\n        setPosts({ posts: res.docs, totalPages: res.totalPages })\n      );\n    }\n  }, [page, accessToken]);\n\n  return posts;\n};\n","import \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Footer } from \"./components/Footer\";\nimport { Header } from \"./components/Header\";\nimport { Blog } from \"./pages/Blog\";\nimport { ConnectToLnForm } from \"./pages/ConnectToLnForm\";\nimport { CreateNewPostForm } from \"./pages/CreateNewPostForm\";\nimport { Drafts } from \"./pages/Drafts\";\nimport { EditPost } from \"./pages/EditPost\";\nimport { Faq } from \"./pages/Faq\";\nimport { Home } from \"./pages/Home\";\nimport { LogIn } from \"./pages/LogIn\";\nimport { Post } from \"./pages/Post\";\nimport { Profile } from \"./pages/Profile\";\nimport { ResetPassword } from \"./pages/ResetPassword\";\nimport { SendResetPasswordEmail } from \"./pages/SendResetPasswordEmail\";\nimport { Settings } from \"./pages/Settings\";\nimport { SignUp } from \"./pages/SignUp\";\nimport { Subs } from \"./pages/Subs\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <div id=\"app-container\" style={styles.appContainer}>\n        <Switch>\n          <Route path=\"/signup\">\n            <Helmet>\n              <title>Sign Up - Brainstorm Press</title>\n            </Helmet>\n            <SignUp />\n          </Route>\n          <Route path=\"/login\">\n            <Helmet>\n              <title>Log In - Brainstorm Press</title>\n            </Helmet>\n            <LogIn />\n          </Route>\n          <Route path=\"/faq\">\n            <Helmet>\n              <title>FAQ - Brainstorm Press</title>\n            </Helmet>\n            <Faq />\n          </Route>\n          <Route path=\"/reset-password/:userId/:token\">\n            <Helmet>\n              <title>Create a New Password - Brainstorm Press</title>\n            </Helmet>\n            <ResetPassword />\n          </Route>\n          <Route path=\"/reset-password\">\n            <Helmet>\n              <title>Reset Your Password - Brainstorm Press</title>\n            </Helmet>\n            <SendResetPasswordEmail />\n          </Route>\n          <Route path=\"/connect-to-ln\">\n            <Helmet>\n              <title>Connect To Lightning - Brainstorm Press</title>\n            </Helmet>\n            <ConnectToLnForm />\n          </Route>\n          <Route path=\"/profile\">\n            <Helmet>\n              <title>Profile - Brainstorm Press</title>\n            </Helmet>\n            <Profile />\n          </Route>\n          <Route path=\"/settings\">\n            <Helmet>\n              <title>Settings - Brainstorm Press</title>\n            </Helmet>\n            <Settings />\n          </Route>\n          <Route path=\"/subscriptions\">\n            <Helmet>\n              <title>Subscriptions - Brainstorm Press</title>\n            </Helmet>\n            <Subs />\n          </Route>\n          <Route path=\"/posts/new\">\n            <Helmet>\n              <title>New Post - Brainstorm Press</title>\n            </Helmet>\n            <CreateNewPostForm />\n          </Route>\n          <Route path=\"/drafts\">\n            <Helmet>\n              <title>Drafts - Brainstorm Press</title>\n            </Helmet>\n            <Drafts />\n          </Route>\n          <Route path=\"/posts/:postId/edit\">\n            <Helmet>\n              <title>Edit Post - Brainstorm Press</title>\n            </Helmet>\n            <EditPost />\n          </Route>\n          <Route path=\"/posts/:postId\">\n            <Post />\n          </Route>\n          <Route path=\"/users/:username/blog\">\n            <Blog />\n          </Route>\n          <Route path=\"/\">\n            <Helmet>\n              <title>Home - Brainstorm Press</title>\n            </Helmet>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n      <Footer />\n    </Router>\n  );\n}\n\nconst styles = {\n  appContainer: {\n    width: \"75%\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    marginBottom: \"50px\",\n  },\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}